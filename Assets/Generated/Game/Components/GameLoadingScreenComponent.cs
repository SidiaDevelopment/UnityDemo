//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity loadingScreenEntity { get { return GetGroup(GameMatcher.LoadingScreen).GetSingleEntity(); } }
    public LoadingScreenComponent loadingScreen { get { return loadingScreenEntity.loadingScreen; } }
    public bool hasLoadingScreen { get { return loadingScreenEntity != null; } }

    public GameEntity SetLoadingScreen(UnityEngine.GameObject newValue) {
        if (hasLoadingScreen) {
            throw new Entitas.EntitasException("Could not set LoadingScreen!\n" + this + " already has an entity with LoadingScreenComponent!",
                "You should check if the context already has a loadingScreenEntity before setting it or use context.ReplaceLoadingScreen().");
        }
        var entity = CreateEntity();
        entity.AddLoadingScreen(newValue);
        return entity;
    }

    public void ReplaceLoadingScreen(UnityEngine.GameObject newValue) {
        var entity = loadingScreenEntity;
        if (entity == null) {
            entity = SetLoadingScreen(newValue);
        } else {
            entity.ReplaceLoadingScreen(newValue);
        }
    }

    public void RemoveLoadingScreen() {
        loadingScreenEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LoadingScreenComponent loadingScreen { get { return (LoadingScreenComponent)GetComponent(GameComponentsLookup.LoadingScreen); } }
    public bool hasLoadingScreen { get { return HasComponent(GameComponentsLookup.LoadingScreen); } }

    public void AddLoadingScreen(UnityEngine.GameObject newValue) {
        var index = GameComponentsLookup.LoadingScreen;
        var component = (LoadingScreenComponent)CreateComponent(index, typeof(LoadingScreenComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceLoadingScreen(UnityEngine.GameObject newValue) {
        var index = GameComponentsLookup.LoadingScreen;
        var component = (LoadingScreenComponent)CreateComponent(index, typeof(LoadingScreenComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveLoadingScreen() {
        RemoveComponent(GameComponentsLookup.LoadingScreen);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLoadingScreen;

    public static Entitas.IMatcher<GameEntity> LoadingScreen {
        get {
            if (_matcherLoadingScreen == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LoadingScreen);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLoadingScreen = matcher;
            }

            return _matcherLoadingScreen;
        }
    }
}
